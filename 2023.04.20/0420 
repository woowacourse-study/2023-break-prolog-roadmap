4월 20일 스터디

# Controller Advice

발표자: 두둠

- Controller Advice가 AOP라고 생각해도 되나요?
- Init binder가 뭔가요?
- exception handler와 controller advice가 똑같은 예외를 잡았을 때 우선 순위가 누가 높나요?
- 서비스 레이어에서 예외가 날라올 때 그냥 예외를 잡는 것과 런타임예외를 잡는 게 둘 다 있을 때 누가 잡나요?
- @ControllerAdvice보다 예외가 발생한 컨트롤러에 있는 @ExceptionHandler가 우선적으로 예외를 잡는다.
- ControllerAdvice를 사용할 수 있는 사례는 무엇이 있는가요? 미션을 진행하는 과정에서 어디에 사용했는가요?
- @RestControllerAdvice와 @ControllerAdvice의 차이가 뭔가요?
    - @ResponseBody유무의 차이
    - 예외가 발생 시 특정 파일을 반환하고 싶은 경우 @ControllerAdvice를 사용하고 메시지를 반환하고 싶으면 @RestControllerAdvice를 사용한다.

---

# DI

발표자: 에밀

- di가 뭔가요?
- dip가 뭔가요?
- ocp가 뭔가요?
    - 변경엔 닫혀있고, 확장엔 열려있는 것을 말한다.
    - dip랑 같은 맥락이다. 변경 가능성이 많으면 인터페이스화를 통해 갈아끼운다.
- 인터페이스로 추상화를 하면 이점이 있는데, 왜 모든것을 인터페이스로 사용하지 않을까요?
- 필드 주입, 생성자 주입, 세터 주입이 있는데 뭐가 좋을까요?
    - 필드 주입의 안좋은점 → 필드가 private일 경우 리플렉션을 사용해 초기화 해야한다.

---

# IoC Container

발표자: 에밀, 영호, 동해

- IoC가 뭔가요?
- IoC Container가 뭔가요?
- 객체를 담는 시기가 어떻게 되나요?
- 사용이 안되는 객체는 어떻게 관리가 되나요?
- prototype은 객체를 사용할 때 생성되나요?
    - 해당 빈이 사용될 때 빈 등록 후 사용하고 삭제된다.
    - 싱글톤 보장이 안된다.
- IoC container가 dispatcherServlet을 등록해서 가지고 있나요?
    - 맞습니다
- 동일한 타입의 빈(같은 인터페이스를 구현)이 2개 이상 있으면 어떤 빈을 사용하나요?
    - 동일한 타입이 2개 있으면 어떤 빈을 사용할지 몰라서 예외 발생
    - 우선순위를(@Qualifier, @Primary) 정해서 어떤 빈을 사용할지 정할 수 있다.
    - 또는, getBean을 할 때 빈 이름으로 가져올 수 있다.

---

# Bean

발표자: 오션, 하디

- 왜 생명주기가 아니라 스코프라고 하나요?
    - 특정 범위 내에서 생존할 수 있어서이다.
- 스프링에서 빈을 기본적으로 싱글톤으로 관리하는 이유가 무엇인가요?
    - 기본적으로 여러 명의 사용자가 동시에 접근한다는 것을 가정한 것이기 때문에 싱글톤으로 빈을 관리하게 된다.
- 디자인 패턴의 싱글톤과 스프링의 싱글톤 차이
    - 디자인 패턴에서의 싱글톤은 JVM에 싱글톤 객체가 딱 하나만 올라간다.
    - 스프링에서 말하는 싱글톤은 스프링 컨테이너에서 하나의 객체가 생성된다는 의미이다.
    - 싱글톤 패턴 vs 싱글톤 레지스트리
- 모든 객체를 스프링 빈으로 등록해도 되나요? 안된다면 특정 객체만 빈으로 등록해야 하는 이유는 무엇인가요?
    - 어플리케이션 실행 중 생성되는 객체(예를 들어미션의 Cars)는 빈으로 등록하면 내가 원하는 데이터로 해당 객체를 생성할 수 없다. 그래서 이 경우 빈으로 등록안하는 것이 좋을 것 같다.
    - 반대로 상태가 없는 경우 빈으로 등록해도 된다.
- 프로토타입 스코프의 존재이유 ?
- 빈으로 등록하는 것과 스태틱 메서드를 사용하는 것 중 어떤 방법을 선호하는가? 구분하는 기준은 무엇인가?
    - 스태틱 메서드의 경우 확장이 불가능하기 때문에 Math같이 확장 가능성이 없는 경우 스태틱 메서드를 사용하게 된다.
    - 그 외의 경우, 빈으로 등록하는게 좋아보인다.

---

# JDBC template

발표자: 하디, 레오

- JDBC Template이 하는 일?
- ConnectionPool을 쓰는 것의 장점은 무엇인가?
- SQL injection예방 가능

---

# HTTP method

발표자: 호이

- put, patch의 차이
    - patch는 일부분만 바꾼다.
    - put은 전부 바꾼다.
- 그럼 put, patch는 post로 대체 가능하지 않나요?
    - 대체 가능하지만 수정에 한해서는 put, patch를 사용하고, 새로 생성하는 경우 post를 사용함으로써 역할을 나눈다. 메서드 별 목적이 다르다. 
- patch는 잘 쓰지 않는다.
    - 일부만 바꾸면 문제가 발생할 수 있다.
- get으로 body에 데이터를 넣을 수 있나요?
    - 넣을 수 있지만 규약에 맞지 않는다.
- http와 https의 차이는 뭔가요?
    - https는 보안이 추가되었다.
- 많이 쓰는 400번대 에러는 무엇이 있을까요?
    - 403 forbidden, 405 method not matching

---

# Layered Architecture

발표자: 두둠, 호이

- layered architecture가 뭔가요?
- N-tier, layer의 차이가 뭔가요?
    - tier는 물리적으로 나눠진거 ex) Web server, WAS, DB server
    - layer는 논리적으로 나눠진거.
- 왜 한 계층씩만 의존하게 했나요?
    - 여러 개의 layer가 하나의 layer를 의존할 경우 해당 layer수정 시 너무 많은 layer의 수정이 필요하다. 즉, 수정의 영향을 최소화하기 위해 사용한다
- 단점은 뭔가요?
    - 아키텍처 싱크홀 안티 패턴 위험 : 특정 계층은 다른 계층 호출만 할 수도 있음. 이런 코드는 20% 이하로 유지하는게 좋다.
    - 밀접한 계층간 조금씩 역방향으로 영향을 미칠 수 있다.
- service layer가 뭔가요
- presentation layer에 도메인 객체가 넘어가도 되냐?
    - 이론적으론 안넘어가는 게 좋고, dto를 넘기는게 좋다.
    - 하지만 dto도 관리해야 하는 객체이기 때문에 트레이드 오프 관계라고 생각한다.
- 만약 dao에서 service로 DTO를 반환할 때, service가 원하는 데이터로만 이루어진 DTO를 service에서 생성하는 건 역방향 의존관계인가요?